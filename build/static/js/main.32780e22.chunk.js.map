{"version":3,"sources":["logo.svg","components/SearchForm/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","state","InputText","images","handleSearchTermChange","searchTerm","fetch","then","response","json","jsonObject","alert","JSON","stringify","imageArray","photos","photo","map","pic","imageSrc","farm","server","id","secret","react_default","a","createElement","alt","src","setState","event","target","value","preventDefault","FetchImages","grid","i","length","push","Grid","Column","mobile","tablet","computer","className","type","name","onChange","required","defaultValue","doubling","columns","Row","createGrid","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_SearchForm","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gNC8ExBC,cAzEhB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAChBA,EAAKU,MAAQ,CACbC,UAAW,GACXC,OAAQ,IAEZZ,EAAKa,uBAAyBb,EAAKa,uBAAuBL,KAA5BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPZA,6EAad,IAAIc,EAAWX,KAAKO,MAAMC,UAC1BI,MAAM,mHAAmHD,EAAW,qDACnIE,KAAK,SAASC,GACf,OAAOA,EAASC,SAEfF,KAAK,SAASG,GACfC,MAAMC,KAAKC,UAAUH,IACrB,IAAII,EAAaJ,EAAWK,OAAOC,MAAMC,IAAI,SAACC,GAC9C,IAAIC,EAAW,eAAeD,EAAIE,KAAK,qBAAqBF,EAAIG,OAAO,IAAIH,EAAII,GAAG,IAAIJ,EAAIK,OAAO,OACjG,OACAC,EAAAC,EAAAC,cAAA,OAAKC,IAAI,QAAQC,IAAKT,MAGtBzB,KAAKmC,SAAS,CAAC1B,OAAQW,KACrBf,KAAKL,sDAIYoC,GACfpC,KAAKmC,SAAU,CAAC3B,UAAU4B,EAAMC,OAAOC,yCAGtCF,GACLA,EAAMG,iBACNvC,KAAKwC,mDAML,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI1C,KAAKO,MAAME,OAAOkC,OAAQD,IAC9CD,EAAKG,KACLd,EAAAC,EAAAC,cAACa,EAAA,EAAKC,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GAC1CjD,KAAKO,MAAME,OAAOiC,KAI1B,OAAOD,mCAKP,OACAX,EAAAC,EAAAC,cAAA,OAAKJ,GAAG,eACLE,EAAAC,EAAAC,cAAA,QAAM5B,SAAUJ,KAAKI,UAClB0B,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,UAAb,wBACApB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,OAAOC,KAAK,YAAYC,SAAUrD,KAAKU,uBAAyB4C,SAAS,aACrFxB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,SAASI,aAAa,YAErCzB,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMW,UAAQ,EAACC,QAAS,GACrB3B,EAAAC,EAAAC,cAACa,EAAA,EAAKa,IAAN,KACI1D,KAAK2D,wBAlEOC,aCCPA,YCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACTrC,EAAAC,EAAAC,cAAA,WACYF,EAAAC,EAAAC,cAACoC,EAAD,OAGNC,SAASC,eAAe,SD6GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.32780e22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { Grid} from 'semantic-ui-react'\n\n\nclass SearchForm extends Component {\nconstructor(props){\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n    InputText: '',\n    images: [],\n};\nthis.handleSearchTermChange = this.handleSearchTermChange.bind(this);\n}\n\n\n//fetches images from api and stores images related to search term in the images array\nFetchImages(){\n    var searchTerm=this.state.InputText;\n    fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=22b7d5bde5eb0e61538db8f0206e48a6&tags='+searchTerm+'&per_page=100&page=1&format=json&nojsoncallback=1')\n    .then(function(response){\n    return response.json();\n    })\n    .then(function(jsonObject){\n    alert(JSON.stringify(jsonObject));\n    let imageArray = jsonObject.photos.photo.map((pic) => {\n    var imageSrc = 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\n    return(\n    <img alt=\"image\" src={imageSrc}></img>\n    )\n    })\n    this.setState({images: imageArray});\n    }.bind(this))\n}\n\n\nhandleSearchTermChange(event){\n        this.setState( {InputText:event.target.value} );\n} \n\nonSubmit(event) {\n    event.preventDefault();\n    this.FetchImages();\n}\n\n//dynamically creates grid \ncreateGrid() {\n    let grid = []\n    for (let i = 0; i < this.state.images.length; i++) {\n    grid.push(\n    <Grid.Column mobile={16} tablet={8} computer={4}>\n       {this.state.images[i]}\n    </Grid.Column>\n    )\n}\nreturn grid\n}\n\n\nrender() {\nreturn (\n<div id=\"search-form\">\n   <form onSubmit={this.onSubmit}>\n      <p className=\"header\">Enter Text to Search</p>\n      <input type=\"text\" name=\"InputText\" onChange={this.handleSearchTermChange}  required=\"required\" />\n      <input type=\"submit\" defaultValue=\"Search\" />\n   </form>\n   <div >\n      <Grid doubling columns={5} >\n         <Grid.Row>\n            {this.createGrid()}\n         </Grid.Row>\n      </Grid>\n   </div>\n</div>\n);\n}\n}\nexport default (SearchForm);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchForm from './components/SearchForm'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <SearchForm/>  \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport SearchForm from './components/SearchForm';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<div>\n            <SearchForm />\n\n</div>\n    , document.getElementById(\"root\")\n    );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}